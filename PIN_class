# The PIN class provides a simple way to interface with individual GPIO PINs and will maintain
# various attributes associated with the PIN.

#import RPi.GPIO as GPIO					# Use RPi.GPIO module and reference as GPIO

class PIN:								# Define PIN class	
	
	def __init__(self,pin):         # Instance constructor, takes a PIN ID as a parameter
		self.UNDEFINED  = 0	# Constant used for undefined mode or state 
		self.INPUT      = 1	# Constant used for input mode
		self.OUTPUT     = 2	# Constant used for output mode
		self.LOW        = 1	# Constant used to signify the pin state is low
		self.HIGH       = 2	# Constant used to signify the pib state is high
		self.__id 	= str(pin)	# Identifier for pin
		self.__mode     = self.UNDEFINED	# Holds the current mode (input or output)
		self.__status	= self.UNDEFINED	# Holds the current stats (low or high)
		self.__gui_obj  = ""		# May be used to refer to a related gui object

# Method to set mode to either INPUT or OUTPUT
	def setup(self,mode):
		self.__mode = mode
		if mode == self.INPUT:
			pass
			#GPIO.setup(self.port,GPIO.IN)
		elif mode == self.OUTPUT:
			pass
			#GPIO.setup(self.port,GPIO.OUT)
	
# Method to set pin status (LOW or HIGH)
	def set(self,on_off):		# Pass boolean vaue to indicate whether to turn on (True) or off (False)
		self.__status = on_off	
		#GPIO.output(self.port,on_off)
		
# Method to return a string describing current object attribut value (called by print() function) 
	def __str__(self):
		return "PIN ID: " + str(self.__id) + "\nMode: " + str(self.__mode) +  "\nStatus: " + str(self.__status) +"\nGUI Obj: " + str(self.__gui_obj)

# Method to return to the ID of this pin.
	def get_id(self):
		return (self.__id)

# Method to return the current mode
	def get_mode(self):
		return (self.__mode)

# Method to return current status
	def get_status(self):
		returrn (self.__status)

# Method to return related gui object
	def get_gui_obj(self):
		return (self.__gui_obj)
# End of PIN class
